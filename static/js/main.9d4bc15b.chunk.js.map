{"version":3,"sources":["app/resources/vehicleAPI.js","app/constants/index.js","app/slices/vehicleSlice.js","app/components/Menu.js","app/components/DragAndDropTable.js","app/components/Header.js","app/components/Search.js","app/components/GroupedTable.js","app/components/App/App.js","app/components/counter/counterAPI.js","app/components/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["SEARCH_API_KEY","api","fetchMarks","markaId","requestString","fetch","then","response","json","fetchVehicles","categoryId","selectedMarks","markaSubstring","reduce","memo","marka","index","value","encodeURI","result","fetchOneVehicle","id","CATEGORIES","createAsyncThunk","a","search_result","ids","Promise","all","map","vehicleSlice","createSlice","name","initialState","marks","vehicles","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","vehicleDataTable","vehicle","markName","title","USD","regionName","stateData","cityLocative","travelRoute","marksSelector","Menu","history","useHistory","useState","isAsideVisible","toggleAside","Aside","styled","aside","StyledButton","Button","StyledButtonGroup","ButtonGroup","icon","onClick","vertical","push","rightIcon","text","DragAndDropTable","Search","StyledHeader","div","StyledHeaderText","StyledCog","src","alt","minimal","Header","dispatch","useDispatch","useSelector","setMarks","StyledSearchWrapper","StyledSearchInputWrapper","MarkMultiSelect","MultiSelect","ofType","isMarkSelected","mark","includes","clearButton","length","undefined","deleteMark","filter","itemPredicate","query","_index","normalizedMark","toLowerCase","normalizedQuery","indexOf","itemRenderer","handleClick","modifiers","matchesPredicate","items","fill","noResults","disabled","onItemSelect","popoverProps","tagRenderer","tagInputProps","onRemove","rightElement","selectedItems","intent","GroupedTable","tableData","StyledTableWrapper","className","style","width","height","rowData","field","sortable","rowGroup","App","useEffect","StyledApp","StyledContent","path","fetchCount","amount","resolve","setTimeout","data","incrementAsync","counterSlice","increment","decrement","incrementByAmount","actions","store","configureStore","reducer","counter","counterReducer","vehicleReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d4bc15b.chunk.js","sourcesContent":["const SEARCH_API_KEY = 'BNkne13cBor7gdX7Tjp0kbWLcg9eA7XIxY5AIlgw';\r\n\r\nconst fetchMarks = (markaId) => {\r\n  const requestString = `https://developers.ria.com/auto/categories/` +\r\n    `${markaId}/marks?api_key=${SEARCH_API_KEY}`;\r\n\r\n  return fetch(requestString)\r\n    .then(response => response.json());\r\n}\r\n\r\nconst fetchVehicles = (categoryId, selectedMarks) => {\r\n  const markaSubstring = selectedMarks.reduce((memo, marka, index) => {\r\n    return memo + `&marka_id[${index}]=${marka.value}&model_id[${index}]=0`;\r\n  }, '');\r\n\r\n  const requestString = `https://developers.ria.com/auto/search?api_key=${SEARCH_API_KEY}` +\r\n    `&category_id=${categoryId}` +\r\n    markaSubstring +\r\n    '&state[0]=7' +\r\n    '&city[0]=0';\r\n\r\n  return fetch(encodeURI(requestString))\r\n    .then(response => response.json())\r\n    .then(({ result }) => result);\r\n}\r\n\r\nconst fetchOneVehicle = (id) => {\r\n  return fetch(`https://developers.ria.com/auto/info?api_key=${SEARCH_API_KEY}&auto_id=${id}`)\r\n    .then(response => response.json());\r\n}\r\n\r\nconst api = {\r\n  fetchMarks,\r\n  fetchVehicles,\r\n  fetchOneVehicle,\r\n};\r\n\r\nexport default api;\r\n","export const CATEGORIES = { MOTORCYCLE: 2 };\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport api from '../resources/vehicleAPI';\r\nimport { CATEGORIES } from '../constants'\r\n\r\nconst initialState = {\r\n  marks: [],\r\n  vehicles: [],\r\n  status: 'idle',\r\n};\r\n\r\nexport const fetchMarks = createAsyncThunk(\r\n  'vehicles/fetchMarks',\r\n  async () => {\r\n    return await api.fetchMarks(CATEGORIES.MOTORCYCLE);\r\n  }\r\n);\r\n\r\nexport const fetchVehicles = createAsyncThunk(\r\n  'vehicles/fetchVehicles',\r\n  async (selectedMarks) => {\r\n    const ids = (await api.fetchVehicles(CATEGORIES.MOTORCYCLE, selectedMarks)).search_result?.ids;\r\n\r\n    return await Promise.all(ids.map((id) => api.fetchOneVehicle(id)));\r\n  }\r\n);\r\n\r\nexport const vehicleSlice = createSlice({\r\n  name: 'vehicle',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchMarks.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchMarks.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.marks = action.payload;\r\n      })\r\n      .addCase(fetchVehicles.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchVehicles.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.vehicles = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const vehicleDataTable = (state) => state.vehicle.vehicles.map((vehicle) => ({\r\n  markName: vehicle.markName,\r\n  title: vehicle.title,\r\n  USD: vehicle.USD,\r\n  regionName: vehicle.stateData.regionName,\r\n  cityLocative: vehicle.cityLocative,\r\n  travelRoute: []\r\n}));\r\n\r\nexport const marksSelector = (state) => state.vehicle.marks;\r\n\r\nexport default vehicleSlice.reducer;\r\n\r\n","import { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, ButtonGroup } from \"@blueprintjs/core\";\r\nimport styled from 'styled-components'\r\n\r\nconst Menu = () => {\r\n  const history = useHistory();\r\n  const [isAsideVisible, toggleAside] = useState(false);\r\n  const handleToggleAside = () => toggleAside(!isAsideVisible);\r\n\r\n  const Aside = styled.aside`\r\n    flex: 0 1 auto;\r\n    background-color: #f8f8f8;\r\n    text-align: center;\r\n    position: relative;\r\n    border-right: 1px solid #DADCDE;\r\n  `;\r\n  const StyledButton = styled(Button)`\r\n    position: absolute;\r\n \r\n    bottom: ${isAsideVisible ? '8px' : '0'};\r\n    right: ${isAsideVisible ? '8px' : '-30px'};\r\n  `;\r\n  const StyledButtonGroup = styled(ButtonGroup)`margin: 48px 16px`;\r\n\r\n  return (\r\n    <Aside>\r\n      <StyledButton\r\n        icon={isAsideVisible ? 'caret-left' : 'caret-right'}\r\n        onClick={handleToggleAside}\r\n      />\r\n\r\n      {\r\n        isAsideVisible &&\r\n        <StyledButtonGroup vertical={true}>\r\n          <Button\r\n            onClick={() => history.push(\"/grouped-table\")}\r\n            rightIcon={'caret-right'}\r\n            text={'Grouped table'}\r\n          />\r\n          <Button\r\n            onClick={() => history.push(\"/drag-and-drop\")}\r\n            rightIcon={'caret-right'}\r\n            text={'Drag & Drop'}\r\n          />\r\n        </StyledButtonGroup>\r\n      }\r\n\r\n    </Aside>\r\n  )\r\n};\r\n\r\nexport default Menu;\r\n","const DragAndDropTable = () => {\r\n  return (\r\n    <div>{'Drag & Drop'}</div>\r\n  )\r\n};\r\n\r\nexport default DragAndDropTable;\r\n","import { Button } from \"@blueprintjs/core\";\r\nimport styled from 'styled-components'\r\n\r\nconst Search = () => {\r\n  const StyledHeader = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 46px;\r\n    border-bottom: 1px solid #DADCDE;\r\n  `;\r\n  const StyledHeaderText = styled.div`\r\n    flex: 1 1 auto;\r\n    padding-left: 16px;\r\n    color: #10161A;\r\n    font-size: 18px;\r\n    letter-spacing: 0;\r\n  `;\r\n  const StyledCog = styled(Button)`\r\n    margin-right: 16px;\r\n  `;\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <img src=\"images/logo.png\" alt=\"Logo\" />\r\n      <StyledHeaderText>Moto search</StyledHeaderText>\r\n      <StyledCog icon=\"cog\" minimal={true} />\r\n    </StyledHeader>\r\n  )\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"@blueprintjs/core\";\r\nimport { MenuItem } from \"@blueprintjs/core\";\r\nimport { MultiSelect } from \"@blueprintjs/select\";\r\nimport { marksSelector, fetchVehicles } from '../slices/vehicleSlice';\r\nimport styled from 'styled-components'\r\n\r\nconst Header = () => {\r\n  const dispatch = useDispatch();\r\n  const marks = useSelector(marksSelector);\r\n  const [selectedMarks, setMarks] = useState([]);\r\n\r\n  const StyledHeader = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: 45px;\r\n    padding: 16px;\r\n  `;\r\n  const StyledHeaderText = styled.div`\r\n    color: #000000;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    letter-spacing: 0;\r\n  `;\r\n  const StyledSearchWrapper = styled.div`\r\n    flex: 1 1 auto;\r\n    padding-left: 16px;\r\n  `;\r\n\r\n  const StyledSearchInputWrapper = styled.div`\r\n    width: 50%;\r\n  `;\r\n\r\n  const MarkMultiSelect = MultiSelect.ofType();\r\n\r\n  const filterMark = (query, mark, _index) => {\r\n    const normalizedMark = mark.name.toLowerCase();\r\n    const normalizedQuery = query.toLowerCase();\r\n\r\n    return normalizedMark.indexOf(normalizedQuery) >= 0;\r\n  };\r\n\r\n  const isMarkSelected = (mark) => {\r\n    return selectedMarks.map(({ name }) => name ).includes(mark.name)\r\n  }\r\n\r\n  const renderMark = ({ name }, { handleClick, modifiers }) => {\r\n    if (!modifiers.matchesPredicate) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <MenuItem\r\n        icon={isMarkSelected({ name }) ? \"tick\" : \"blank\"}\r\n        key={name}\r\n        onClick={handleClick}\r\n        text={name}\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderTag = ({ name }) => name;\r\n\r\n  const handleTagRemove = (name) => deleteMark({ name });\r\n\r\n  const clearButton = selectedMarks.length > 0 ?\r\n    <Button icon=\"cross\" minimal={true} onClick={() => setMarks([])} /> : undefined;\r\n\r\n  const deleteMark = (mark) => setMarks(selectedMarks.filter(({ name }) => name !== mark.name));\r\n\r\n  const handleMarkSelect = (mark) => {\r\n    if (isMarkSelected(mark)) {\r\n      return deleteMark(mark);\r\n    }\r\n    setMarks([...selectedMarks, mark]);\r\n  };\r\n\r\n  const handleSearchClick = () => dispatch(fetchVehicles(selectedMarks));\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <StyledHeaderText>Select manufacturer and region</StyledHeaderText>\r\n      <StyledSearchWrapper>\r\n        <StyledSearchInputWrapper>\r\n          <MarkMultiSelect\r\n            itemPredicate={filterMark}\r\n            itemRenderer={renderMark}\r\n            items={marks}\r\n            fill={true}\r\n            noResults={<MenuItem disabled={true} text=\"No results.\" />}\r\n            onItemSelect={handleMarkSelect}\r\n            popoverProps={{ minimal: true }}\r\n            tagRenderer={renderTag}\r\n            tagInputProps={{\r\n              onRemove: handleTagRemove,\r\n              rightElement: clearButton,\r\n            }}\r\n            selectedItems={selectedMarks}\r\n          />\r\n        </StyledSearchInputWrapper>\r\n      </StyledSearchWrapper>\r\n\r\n      <Button\r\n        icon=\"cube-add\"\r\n        intent=\"primary\"\r\n        disabled={selectedMarks.length === 0}\r\n        onClick={handleSearchClick}\r\n      >\r\n        Search vehicles\r\n      </Button>\r\n    </StyledHeader>\r\n  )\r\n};\r\n\r\nexport default Header;\r\n","import {AgGridColumn, AgGridReact} from 'ag-grid-react';\r\nimport styled from 'styled-components'\r\nimport { useSelector } from 'react-redux';\r\nimport { vehicleDataTable } from '../slices/vehicleSlice';\r\nimport Header from './Header'\r\nimport Search from './Search'\r\n\r\nconst TABLE_WIDTH = '100%';\r\nconst TABLE_HEIGHT = '100%';\r\n\r\nconst GroupedTable = () => {\r\n  const tableData = useSelector(vehicleDataTable);\r\n\r\n  const StyledTableWrapper = styled.div`\r\n    flex: 1 1 auto;\r\n    min-width: 0;\r\n    padding: 0 16px 16px 16px;\r\n  `;\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Search />\r\n      <StyledTableWrapper>\r\n        <div\r\n          className=\"ag-theme-alpine\"\r\n          style={{\r\n            width: TABLE_WIDTH,\r\n            height: TABLE_HEIGHT,\r\n          }}\r\n        >\r\n          <AgGridReact\r\n            rowData={tableData}>\r\n            <AgGridColumn\r\n              field=\"markName\"\r\n              sortable={ true }\r\n              filter={ true } rowGroup={true}\r\n            />\r\n            <AgGridColumn\r\n              field=\"title\"\r\n              sortable={ true }\r\n              filter={ true } />\r\n            <AgGridColumn\r\n              field=\"regionName\"\r\n              sortable={ true }\r\n              filter={ true } rowGroup={true} />\r\n            <AgGridColumn\r\n              field=\"cityLocative\"\r\n              sortable={ true }\r\n              filter={ true } rowGroup={true} />\r\n            <AgGridColumn\r\n              field=\"USD\"\r\n              sortable={ true }\r\n              filter={ true } />\r\n            <AgGridColumn\r\n              field=\"travelRoute\"\r\n              sortable={ true }\r\n              filter={ true } />\r\n          </AgGridReact>\r\n        </div>\r\n      </StyledTableWrapper>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default GroupedTable;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchMarks } from '../../slices/vehicleSlice';\r\nimport styled from 'styled-components'\r\nimport {\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport 'normalize.css/normalize.css';\r\nimport Menu from \"../Menu\";\r\nimport DragAndDropTable from \"../DragAndDropTable\";\r\nimport GroupedTable from \"../GroupedTable\";\r\n\r\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\nimport 'ag-grid-enterprise';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(fetchMarks()));\r\n\r\n  const StyledApp = styled.div`\r\n    display: flex;\r\n    min-height: 100vh;\r\n  `;\r\n  const StyledContent = styled.div`\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n  `;\r\n\r\n  return (\r\n    <StyledApp>\r\n      <Menu />\r\n\r\n      <StyledContent>\r\n        <Switch>\r\n          <Route path=\"/grouped-table\">\r\n            <GroupedTable />\r\n          </Route>\r\n          <Route path=\"/drag-and-drop\">\r\n            <DragAndDropTable />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <GroupedTable />\r\n          </Route>\r\n        </Switch>\r\n      </StyledContent>\r\n    </StyledApp>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from './components/counter/counterSlice';\r\nimport vehicleReducer from './slices/vehicleSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    vehicle: vehicleReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/components/App/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}